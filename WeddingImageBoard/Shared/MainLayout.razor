@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using Microsoft.AspNetCore.Components.Forms;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Threading.Tasks;
@inherits LayoutComponentBase

@if (showUploadPopup)
{
    <div class="full-screen-flex">
    <div class="upload-popup">
        <label for="photoName">Name:</label>
        <input id="photoName" type="text" @bind="photoName" />

        <div class="file-upload">
            <span class="drag-text">Drag & Drop files here</span>
            <div class="or-text">or</div>

            <label for="custom-file-upload" class="custom-file-upload">Browse Files</label>
            <InputFile id="custom-file-upload" class="input-file-hidden" accept="image/*" Multiple MaxMessageSize="102400" OnChange="HandleFileSelected"></InputFile>
        </div>

        <button @onclick="UploadButtonClicked">Upload</button>
        <div class="close-btn" @onclick="CloseUploadPopup">X</div>
    </div>
</div>
}


<div class="main-container">
    <div class="header-container">
        <h1>Welcome to the wedding of</h1>
        <h2>Mr. & Mrs. Rodriguez</h2>

        <!-- Show the upload popup when the button is clicked -->
        <button class="custom-button" @onclick="ShowUploadPopup">Upload Photos</button>

        <div class="background-image">
            <!-- This is where the pretty picture will be placed as a background -->
        </div>
    </div>
</div>

<div class="gallery-container">
    @foreach (var blobWithMetadata in blobItems)
    {
        <div class="photo">
            <img src="@GetBlobUri(blobWithMetadata.BlobItem.Name)" alt="@blobWithMetadata.BlobItem.Name" />
            @foreach (var metadata in blobWithMetadata.Metadata)
            {
                <div class="text-content">@metadata.Value</div>
            }
        </div>
    }
</div>

@code {
    private const string StorageConnectionString = "DefaultEndpointsProtocol=https;AccountName=weddingphotoscr;AccountKey=iakIFfhS+c/FeR4Ey5eohZM9yvzDWAWV4JgloUqDbETZBq9Cuacclg4x/t8FuUBnkJjuLUiuk622+ASttzw2Pg==;EndpointSuffix=core.windows.net"; // Replace with your connection string
    private ElementReference inputFile;  // Reference to the InputFile component
    private List<BlobWithMetadata> blobItems = new List<BlobWithMetadata>();
    private bool showUploadPopup = false;
    private string photoName = "";

    // Show the upload popup
    private void ShowUploadPopup()
    {
        showUploadPopup = true;
    }

    // Close the upload popup
    private void CloseUploadPopup()
    {
        showUploadPopup = false;
        photoName = ""; // Clear the input field
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs args)
    {
        await UploadPhotosAsync(args);
        await LoadBlobItems();
    }

    private async Task UploadPhotosAsync(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        BlobServiceClient blobServiceClient = new BlobServiceClient(StorageConnectionString);
        BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient("weddingphotoscontainer");

        foreach (var file in files)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            string blobName = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
            BlobClient blobClient = containerClient.GetBlobClient(blobName);

            using (var stream = new MemoryStream(buffer))
            {
                await blobClient.UploadAsync(stream, true);
            }

            // Store the entered name as metadata
            var metadata = new Dictionary<string, string>
            {
                {"Name", photoName}
            };
            await blobClient.SetMetadataAsync(metadata);

            Console.WriteLine("Upload successful");
        }
    }


    private async Task UploadButtonClicked()
    {
        // You might want to consider moving the upload logic here if you want the upload to start when the 'Upload' button is clicked.
        // For now, this just logs the button click event.
        Console.WriteLine("Upload button clicked.");
    }

    private async Task LoadBlobItems()
    {
        BlobServiceClient blobServiceClient = new BlobServiceClient(StorageConnectionString);
        string containerName = "weddingphotoscontainer";
        BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);

        blobItems.Clear();
        await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
        {
            BlobClient blobClient = containerClient.GetBlobClient(blobItem.Name);
            BlobProperties properties = await blobClient.GetPropertiesAsync();

            blobItems.Add(new BlobWithMetadata
                {
                    BlobItem = blobItem,
                    Metadata = properties.Metadata,
                    CreationTime = properties.CreatedOn  // Adding this to store creation time
                });
        }

        // Sort blob items by creation time
        blobItems = blobItems.OrderByDescending(b => b.CreationTime).ToList();
    }

    private string GetBlobUri(string blobName)
    {
        string containerUri = "https://weddingphotoscr.blob.core.windows.net/weddingphotoscontainer/";
        return containerUri + blobName;
    }

    public class BlobWithMetadata
    {
        public BlobItem BlobItem { get; set; }
        public IDictionary<string, string> Metadata { get; set; }
        public DateTimeOffset? CreationTime { get; set; } // Adding this to store creation time
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBlobItems();
    }
}
