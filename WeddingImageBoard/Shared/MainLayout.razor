@using System
@using Azure.Identity;
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web.Extensions;
@using System.Collections.Generic;
@using System.Net.Http.Json;
@using System.IO;
@using System.Linq;
@using System.Threading;
@using System.Threading.Tasks;
@using Microsoft.Extensions.Configuration;
@using WeddingImageBoard.InfiniteScrolling

@inject NavigationManager NavManager
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inherits LayoutComponentBase

@if (showUploadPopup)
{
    <link rel="stylesheet" href="css/Upload.css" />
    <div class="full-screen-flex" @onclick="CloseUploadPopup">
        <div class="upload-popup" @onclick="UploadBoxClicked">

            <input id="photoName" type="text" @bind="photoName" placeholder="Enter your name" class="name-input-box" />

            <label for="custom-file-upload" class="custom-file-upload">Browse Files</label>
            <h3>Please limit upload to a maximum of 50 images</h3>
            <InputFile @ref="inputFile" MaxAcceptedFiles="50" id="custom-file-upload" class="input-file-hidden" accept="image/*" Multiple MaxMessageSize="20000000" OnChange="HandleFileSelected"></InputFile>

            <div class="file-upload-scroll-container">
                @foreach (var fileState in fileUploadStates)
                {
                    <div class="file-upload-item">
                        <span class="file-name">@fileState.File.Name</span>
                        <div class="upload-progress-container">
                            <div class="upload-progress" style="width:@(fileState.Progress + "%")"></div>
                        </div>
                    </div>
                }
            </div>

            <div class="upload-success-message" style="@(showSuccessMessage ? "display:block;" : "display:none;")">
                Upload Successful!
            </div>
        </div>
    </div>
}





@if (showImagePopup)
{
    <link rel="stylesheet" href="css/ImagePopup.css" />
    <div class="image-popup open" @onclick="CloseImagePopup">
        <div class="image-popup-content">
            <img src="@popupImageUrl" alt="Full-sized Image" @onclick="ImageClicked" />
        </div>
    </div>
}


<div class="background-col">
    <div class="main-container">
        <link rel="stylesheet" href="css/TopContainer.css" />
        <div class="top-container">
            <div class="header-container">
                <h1>Welcome to the wedding of</h1>
                <h2>Mr. & Mrs. Rodriguez!</h2>
                <button class="custom-button" @onclick="ShowUploadPopup">Upload Photos</button>
                <div class="background-image">
                </div>
            </div>
        </div>

        <div class="border-line"> </div>

        <link rel="stylesheet" href="css/TabContainer.css" />
        <div class="tabs-container">
            <div class="tab active" @onclick="ShowGallery">
                <img src="pictures/gallery.png" alt="Gallery Icon" width="16" height="16" />
                Gallery
            </div>
            <div class="tab" @onclick="RedirectToWeddingWebsite">
                <img src="pictures/weddingwebsite.png" alt="Website Icon" width="16" height="16" />
                Website
            </div>
            <div class="tab" @onclick="RedirectToHoneymoon">
                <img src="pictures/honeymoon.png" alt="Website Icon" width="16" height="16" />
                Honeymoon Fund
            </div>
        </div>

        <link rel="stylesheet" href="css/GalleryContainer.css" />
        <div class="gallery-container">
            <InfiniteScrolling ItemsProvider="GetBlobItemsInChunks">
                <ItemTemplate Context="blobWithMetadata">
                    <div class="photo">
                        <img src="@GetBlobUri(blobWithMetadata.BlobItem.Name)"
                             alt="@blobWithMetadata.BlobItem.Name"
                             loading="lazy"
                        @onclick="() => OpenImagePopup(GetBlobUri(blobWithMetadata.BlobItem.Name))" />

                        @foreach (var metadata in blobWithMetadata.Metadata)
                        {
                            <div class="text-content">@metadata.Value</div>
                        }
                    </div>
                </ItemTemplate>

                <LoadingTemplate>
                    <div class="loading">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </LoadingTemplate>

            </InfiniteScrolling>
        </div>
    </div>
</div>



@code {
    // TODO: Add error handling for selecting more than 50 images or 500mb.
    // TODO: Error handling and error handling messages
    // TODO: Find better fonts

    private bool showProgressBar = false;
    private bool showSuccessMessage = false;
    private bool showUploadPopup = false;
    private bool showImagePopup = false;
    private bool isLoading = false;
    private bool hasMoreItems = true;
    private bool showGallery = true;
    bool imageClicked = false;
    bool uploadBoxClicked = false;
    private int progressPercentage = 0;
    private int currentPage = 1;
    private int itemsPerPage = 12;
    private string uploadStatusMessage = "";
    private string photoName = "";
    private string popupImageUrl = null;
    private InputFile inputFile;
    private List<BlobWithMetadata> blobItems = new List<BlobWithMetadata>();
    private List<BlobWithMetadata> displayedItems = new List<BlobWithMetadata>();
    private List<FileUploadState> fileUploadStates = new List<FileUploadState>();

    private async Task<Uri> GetUploadSasUriFromFunction()
    {
        return await Http.GetFromJsonAsync<Uri>("https://weddingwebsitefunctions.azurewebsites.net/api/GetUploadBlobSAS");
    }

    private async Task<Uri> GetBrowseSasUriFromFunction()
    {
        return await Http.GetFromJsonAsync<Uri>("https://weddingwebsitefunctions.azurewebsites.net/api/GetBrowseContainerSAS");
    }

    void ShowGallery()
    {
        showGallery = true;
    }

    void RedirectToWeddingWebsite()
    {
        showGallery = false;
        // Redirect to the website you want
        NavManager.NavigateTo("https://www.zola.com/wedding/christianandsomer");
    }

    void RedirectToHoneymoon()
    {
        showGallery = false;
        // Redirect to the website you want
        NavManager.NavigateTo("https://www.zola.com/wedding/christianandsomer/registry");
    }

    private void OpenImagePopup(string imageUrl)
    {
        popupImageUrl = imageUrl;
        showImagePopup = true;
    }

    private void CloseImagePopup(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        if (!imageClicked)
        {
            showImagePopup = false;
        }
        imageClicked = false;
    }

    private void ShowUploadPopup()
    {
        showUploadPopup = true;
    }

    private void CloseUploadPopup()
    {
        if (!uploadBoxClicked)
        {
            showUploadPopup = false;
            showProgressBar = false;
            showSuccessMessage = false;
            fileUploadStates.Clear();
            StateHasChanged();
        }
        uploadBoxClicked = false;
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync("triggerFilePicker");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        showProgressBar = true;
        showSuccessMessage = false;
        StateHasChanged();

        var uploadTasks = e.GetMultipleFiles(50).Select(file =>
        {
            var fileState = new FileUploadState { File = file, Progress = 0 };
            fileUploadStates.Add(fileState);
            return UploadPhotoAsync(fileState);
        }).ToList();

        await Task.WhenAll(uploadTasks);
        fileUploadStates.Clear();
        showSuccessMessage = true;
        StateHasChanged();
        await Task.Delay(3000);
        showUploadPopup = false;
        CloseUploadPopup();
        showSuccessMessage = false;
        //await JSRuntime.InvokeVoidAsync("eval", "location.reload()");
    }


    private async Task UploadPhotoAsync(FileUploadState fileState)
    {
        var file = fileState.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 1024 * 500000).ReadAsync(buffer);

        string blobName = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
        Uri sasUri = await GetUploadSasUriFromFunction();
        BlobClient blobClient = new BlobClient(sasUri);

        using (var stream = new MemoryStream(buffer))
        {
            var uploadOptions = new BlobUploadOptions
                {
                    ProgressHandler = new Progress<long>(bytesTransferred =>
                    {
                        UpdateProgress(fileState, bytesTransferred, buffer.Length);
                    })
                };

            await blobClient.UploadAsync(stream, uploadOptions);
        }

        // Store the entered name as metadata
        var metadata = new Dictionary<string, string>
    {
        {"Name", photoName}
    };
        await blobClient.SetMetadataAsync(metadata);

        fileState.Progress = 100;
        StateHasChanged();
    }



    private void UpdateProgress(FileUploadState fileState, long bytesTransferred, long totalBytes)
    {
        // Calculate the progress percentage
        double progressPercentage = ((double)bytesTransferred / totalBytes) * 100;

        fileState.Progress = (int)progressPercentage;
        StateHasChanged();
    }

    private string GetBlobUri(string blobName)
    {
        string containerUri = "https://weddingphotoscr.blob.core.windows.net/weddingphotoscontainertest1/";
        return containerUri + blobName;
    }

    public class FileUploadState
    {
        public IBrowserFile File { get; set; }
        public int Progress { get; set; } = 0;
    }

    public class BlobWithMetadata
    {
        public BlobItem BlobItem { get; set; }
        public IDictionary<string, string> Metadata { get; set; }
        public DateTimeOffset? CreationTime { get; set; }
    }

    private async Task<IEnumerable<BlobWithMetadata>> GetBlobItemsInChunks(InfiniteScrollingItemsProviderRequest request)
    {
        var sasUri = await GetBrowseSasUriFromFunction();
        BlobContainerClient containerClient = new BlobContainerClient(sasUri);
        var allBlobItems = new List<BlobWithMetadata>();

        int pageSize = 12;
        var blobResults = containerClient.GetBlobsAsync(BlobTraits.Metadata, BlobStates.All);

        var tasks = new List<Task<BlobWithMetadata>>();
        await foreach (BlobItem blobItem in blobResults)
        {
            tasks.Add(FetchBlobMetadata(containerClient, blobItem));
        }

        var results = await Task.WhenAll(tasks);
        allBlobItems.AddRange(results);

        // Sort all blob items by creation time
        allBlobItems = allBlobItems.OrderByDescending(b => b.CreationTime).ToList();

        int startIndex = request.StartIndex;
        int endIndex = Math.Min(startIndex + pageSize, allBlobItems.Count);

        return allBlobItems.Skip(startIndex).Take(endIndex - startIndex);
    }

    private async Task<BlobWithMetadata> FetchBlobMetadata(BlobContainerClient containerClient, BlobItem blobItem)
    {
        BlobClient blobClient = containerClient.GetBlobClient(blobItem.Name);
        BlobProperties properties = await blobClient.GetPropertiesAsync();

        return new BlobWithMetadata
            {
                BlobItem = blobItem,
                Metadata = properties.Metadata,
                CreationTime = properties.CreatedOn
            };
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new InfiniteScrollingItemsProviderRequest(0, CancellationToken.None); // Initialize with appropriate values
        await LoadItemsAsync(request);
    }

    private async ValueTask OnScroll()
    {
        if (!isLoading && hasMoreItems)
        {
            // Calculate the new start index
            int startIndex = displayedItems.Count;

            // Create a new request with the start index and page size
            var request = new InfiniteScrollingItemsProviderRequest(startIndex, CancellationToken.None);

            await LoadItemsAsync(request);
        }
    }

    private async Task LoadItemsAsync(InfiniteScrollingItemsProviderRequest request)
    {
        if (!isLoading && hasMoreItems)
        {
            isLoading = true;
            var newItems = await GetBlobItemsInChunks(request);
            isLoading = false;

            if (newItems.Any())
            {
                displayedItems.AddRange(newItems);
                currentPage++;
            }
            else
            {
                hasMoreItems = false;
            }

            StateHasChanged();
        }
    }

    private void ImageClicked()
    {
        imageClicked = true;
    }

    private void UploadBoxClicked()
    {
        uploadBoxClicked = true;
    }
}