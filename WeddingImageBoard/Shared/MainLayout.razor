@using Azure.Identity;
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Collections.Generic;
@using System.IO;
@using System.Linq;
@using System.Threading
@using System.Threading.Tasks;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
<!--Add a loading bar to the image upload and a complete message when the photos are uploaded. followed by closing the upload popup-->

@if (showUploadPopup) {
    <div class="full-screen-flex">
        <div class="upload-popup">
            <input id="photoName" type="text" @bind="photoName" placeholder="Enter your name" class="name-input-box" />

            <label for="custom-file-upload" class="custom-file-upload">Browse Files</label>
            <InputFile @ref="inputFile" id="custom-file-upload" class="input-file-hidden" accept="image/*" Multiple MaxMessageSize="102400" OnChange="HandleFileSelected"></InputFile>
            <div class="upload-progress-container" style="@(showProgressBar ? "display:block;" : "display:none;")">
                <div class="upload-progress" style="width:@(progressPercentage + "%")"></div>
            </div>
            <div class="upload-success-message" style="@(showSuccessMessage ? "display:block;" : "display:none;")">
                Upload Successful!
            </div>
            <div class="close-btn" @onclick="CloseUploadPopup">X</div>
        </div>
    </div>
}

@if (showImagePopup) {
    <div class="image-popup open" @onclick="CloseImagePopup">
        <div class="image-popup-content">
            <span class="image-close" @onclick="CloseImagePopup">×</span>
            <img src="@popupImageUrl" alt="Full-sized Image" />
        </div>
    </div>
}



<div class="background-col">
    <div class="main-container">
<div class="top-container">
    <div class="header-container">
        <h1>Welcome to the wedding of</h1>
        <h2>Mr. & Mrs. Rodriguez</h2>

        <!-- Show the upload popup when the button is clicked -->
        <button class="custom-button" @onclick="ShowUploadPopup">Upload Photos</button>

        <div class="background-image">
            <!-- This is where the pretty picture will be placed as a background -->
        </div>
    </div>
</div>
        <div class="border-line">
            </div>

<div class="gallery-container">
    @foreach (var blobWithMetadata in blobItems)
    {
        <div class="photo">
            <img src="@GetBlobUri(blobWithMetadata.BlobItem.Name)" alt="@blobWithMetadata.BlobItem.Name" @onclick="() => OpenImagePopup(GetBlobUri(blobWithMetadata.BlobItem.Name))"/>
            @foreach (var metadata in blobWithMetadata.Metadata)
            {
                <div class="text-content">@metadata.Value</div>
            }
        </div>
    }
</div>
</div>
</div>

@code {
    private const string StorageConnectionString = "DefaultEndpointsProtocol=https;AccountName=weddingphotoscr;AccountKey=iakIFfhS+c/FeR4Ey5eohZM9yvzDWAWV4JgloUqDbETZBq9Cuacclg4x/t8FuUBnkJjuLUiuk622+ASttzw2Pg==;EndpointSuffix=core.windows.net";
    // private string _storageConnectionString;

    // public string StorageConnectionString
    // {
    //     get
    //     {
    //         if (_storageConnectionString == null)
    //         {
    //             _storageConnectionString = config["weddingwebsitekey"];
    //         }
    //         return _storageConnectionString;
    //     }
    // }

    private bool showProgressBar = false;
    private bool showSuccessMessage = false;
    private int progressPercentage = 0;

    private InputFile inputFile;  // Reference to the InputFile component
    private List<BlobWithMetadata> blobItems = new List<BlobWithMetadata>();
    private bool showUploadPopup = false;
    private string photoName = "";
    private string popupImageUrl = null;
    private bool showImagePopup = false;

    private void OpenImagePopup(string imageUrl)
    {
        popupImageUrl = imageUrl;
        showImagePopup = true;
    }

    private void CloseImagePopup()
    {
        showImagePopup = false;
    }

    // Show the upload popup
    private void ShowUploadPopup()
    {
        showUploadPopup = true;
    }

    // Close the upload popup
    private void CloseUploadPopup()
    {
        showUploadPopup = false;
        photoName = "";
        showSuccessMessage = false;
        progressPercentage = 0;
        StateHasChanged();
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync("triggerFilePicker");
    }

    // Handle the selected files
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        showProgressBar = true;
        showSuccessMessage = false;
        StateHasChanged();  // Request a re-render

        var files = e.GetMultipleFiles().ToList();
        await UploadPhotosAsync(files);

        showProgressBar = false;
        showSuccessMessage = true;
        StateHasChanged();  // Request a re-render
        await Task.Delay(2000);

        CloseUploadPopup();
        await LoadBlobItems();
    }



    private async Task UploadPhotosAsync(List<IBrowserFile> files)
    {
        BlobServiceClient blobServiceClient = new BlobServiceClient(StorageConnectionString);
        BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient("weddingphotoscontainer");

        int totalFiles = files.Count;
        int uploadedFiles = 0;

        foreach (var file in files)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            string blobName = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
            BlobClient blobClient = containerClient.GetBlobClient(blobName);

            using (var stream = new MemoryStream(buffer))
            {
                await blobClient.UploadAsync(stream, true);
            }

            // Store the entered name as metadata
            var metadata = new Dictionary<string, string>
        {
            {"Name", photoName}
        };
            await blobClient.SetMetadataAsync(metadata);

            uploadedFiles++;
            progressPercentage = (uploadedFiles * 100) / totalFiles;
            await JSRuntime.InvokeVoidAsync("updateProgressBar", progressPercentage);

            Console.WriteLine("Upload successful");
        }
    }


    private async Task LoadBlobItems()
    {
        BlobServiceClient blobServiceClient = new BlobServiceClient(StorageConnectionString);
        string containerName = "weddingphotoscontainer";
        BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);

        blobItems.Clear();
        await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
        {
            BlobClient blobClient = containerClient.GetBlobClient(blobItem.Name);
            BlobProperties properties = await blobClient.GetPropertiesAsync();

            blobItems.Add(new BlobWithMetadata
                {
                    BlobItem = blobItem,
                    Metadata = properties.Metadata,
                    CreationTime = properties.CreatedOn  // Adding this to store creation time
                });
        }

        // Sort blob items by creation time
        blobItems = blobItems.OrderByDescending(b => b.CreationTime).ToList();
    }

    private string GetBlobUri(string blobName)
    {
        string containerUri = "https://weddingphotoscr.blob.core.windows.net/weddingphotoscontainer/";
        return containerUri + blobName;
    }

    public class BlobWithMetadata
    {
        public BlobItem BlobItem { get; set; }
        public IDictionary<string, string> Metadata { get; set; }
        public DateTimeOffset? CreationTime { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBlobItems();
    }
}
